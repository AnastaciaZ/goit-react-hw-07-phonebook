{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Alert/Alert.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/Logo/Logo.module.css","App.module.css","components/Button/Button.module.css","redux/contacts/actions.js","redux/contacts/operations.js","components/Button/Button.js","components/Alert/Alert.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Logo/Logo.js","App.js","redux/contacts/reducer.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","contactsOperations","fetchContacts","dispatch","get","then","data","catch","error","addContact","name","number","contact","post","deleteContact","contactId","delete","Button","label","type","onClick","className","s","button","AlertMessage","message","container","textMessage","getFilterName","state","contacts","filter","getAllContacts","items","selectors","getLoading","loading","getFilterContacts","createSelector","toLowerCase","includes","ContactForm","nameInputId","shortid","generate","handleChange","event","currentTarget","value","setState","handleSubmit","preventDefault","props","some","item","setTimeout","onSubmit","reset","this","contactsForm","htmlFor","labelForm","contactInput","onChange","id","CSSTransition","in","timeout","classNames","styleAlert","unmountOnExit","Alert","React","Component","connect","contactsSelectors","onDelete","TransitionGroup","component","map","contactList","contactText","mapDispatchToProps","onChangeFilter","contactsActions","length","labelFilter","filterInput","e","target","Logo","appear","srtyles","logo","App","loadingContacts","initialState","createReducer","_","payload","action","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsStore","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.1abbe3e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsForm\":\"ContactForm_contactsForm__1XUBs\",\"labelForm\":\"ContactForm_labelForm__9EDxR\",\"contactInput\":\"ContactForm_contactInput__qosE9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Alert_container__3VxwC\",\"textMessage\":\"Alert_textMessage__2aRd9\",\"enter\":\"Alert_enter__3SU9H\",\"enterActive\":\"Alert_enterActive__12UDh\",\"exit\":\"Alert_exit__18YFn\",\"exitActive\":\"Alert_exitActive__1dmc2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__3kVSb\",\"contactText\":\"ContactList_contactText__3Q3gm\",\"enter\":\"ContactList_enter__2lAwM\",\"enterActive\":\"ContactList_enterActive__2EctL\",\"exit\":\"ContactList_exit__3hO4c\",\"exitActive\":\"ContactList_exitActive__2qMQb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Filter_container__1KDKI\",\"labelFilter\":\"Filter_labelFilter__1NsG3\",\"filterInput\":\"Filter_filterInput__2424a\",\"enter\":\"Filter_enter__1LaFg\",\"enterActive\":\"Filter_enterActive__5H4a5\",\"exit\":\"Filter_exit__34H4E\",\"exitActive\":\"Filter_exitActive__37K-s\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Logo_logo__1FZuX\",\"appear\":\"Logo_appear__3DfFo\",\"appearActive\":\"Logo_appearActive__30EVt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2tj7q\",\"loading\":\"App_loading__2pxWz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__LdHG_\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError\r\n} from './actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => { \r\n    dispatch(fetchContactRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n        .catch(error => dispatch(fetchContactError(error )));\r\n}\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error )));\r\n       \r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(() => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nconst contactsOperations={ fetchContacts, addContact, deleteContact }\r\n\r\nexport default contactsOperations;","import React from 'react';\r\nimport s from '../Button/Button.module.css';\r\n\r\nconst Button = ({ label, type = 'button', onClick = () => null }) => (\r\n  <button className={s.button} type={type} onClick={onClick}>\r\n    {label}\r\n  </button>\r\n);\r\n\r\nexport default Button;","import React from 'react';\r\nimport s from '../Alert/Alert.module.css'\r\n\r\nconst AlertMessage = ({ message }) => (\r\n   \r\n    <div className={s.container}>\r\n        <p className={s.textMessage}>{ message}</p>\r\n    </div>  \r\n    \r\n);\r\n\r\nexport default AlertMessage;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilterName = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n \r\nconst getFilterContacts = createSelector(\r\n    [getAllContacts, getFilterName],\r\n    (contacts, filter) => {\r\n        return contacts.filter(({ name }) =>\r\n            name.toLowerCase().includes(filter.toLowerCase()),\r\n        );\r\n    },\r\n);\r\n\r\nconst selectors = { getLoading, getFilterName, getAllContacts, getFilterContacts};\r\n\r\nexport default selectors;\r\n\r\n\r\n\r\n\r\n/*const getFilterContacts = state => {\r\n    const contacts = getAllContacts(state);\r\n    const filter = getFilterName(state);\r\n\r\n     return contacts.filter(({name}) =>\r\n        name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n};*/","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/operations';\r\nimport shortid from 'shortid';\r\nimport Button from '../Button/Button';\r\nimport AlertMessage from '../Alert/Alert';\r\nimport styleAlert from '../Alert/Alert.module.css';\r\nimport s from '../ContactForm/ContactForm.module.css';\r\nimport contactsSelectors from '../../redux/contacts/selectors';\r\n\r\nclass ContactForm extends React.Component { \r\n    state = {\r\n        name: '',\r\n        number: '',\r\n        message: null,\r\n    };\r\n\r\n    nameInputId = shortid.generate();\r\n\r\n    handleChange = event => {\r\n    const { name,value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n    };\r\n\r\n    handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (this.state.name === '') {\r\n           \r\n     this.setState({ message: 'Please enter contact name' }) || setTimeout(() => {\r\n        this.setState({ message: null });\r\n      }, 2000)\r\n\r\n      return;\r\n        }\r\n         if (this.state.number === '') { \r\n      \r\n      this.setState({ message: 'Please enter contact number' }) || setTimeout(() => {\r\n        this.setState({ message: null });\r\n      }, 2000)\r\n\r\n      return;\r\n        }\r\n        \r\n       if (this.props.items.some((item) => item.name === this.state.name)){ \r\n            this.setState({ message: `${this.state.name} is already in contacts!` }) || setTimeout(() => {\r\n        this.setState({ message: null });\r\n            }, 2000)\r\n            return;\r\n        }\r\n    \r\n        this.props.onSubmit(this.state.name, this.state.number);\r\n        this.reset();\r\n    };\r\n    reset = () => { \r\n        this.setState({name: '', number: ''});\r\n        };\r\n\r\n    render() { \r\n        const {name, number, message } = this.state;\r\n        return (\r\n            <form className={ s.contactsForm} onSubmit={this.handleSubmit}>\r\n                <label htmlFor={this.nameInputId} className={ s.labelForm}>  \r\n                    Name\r\n           <br />\r\n                    <input\r\n                    className={ s.contactInput}\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={name}\r\n                    onChange={this.handleChange}\r\n                        id={this.nameInputId} />\r\n                </label>\r\n                <br/>\r\n                <label className={ s.labelForm}>\r\n                    Number\r\n                     <br />\r\n            <input\r\n                    className={ s.contactInput}\r\n                    type=\"text\"\r\n                    name=\"number\"\r\n                    value={number}\r\n                    onChange={this.handleChange} />\r\n                </label>\r\n                <br />\r\n                <Button label=\"Add contact\" type=\"submit\" />\r\n                \r\n                <CSSTransition\r\n                    in={message!==null}\r\n                    timeout={250}\r\n                    classNames={styleAlert}\r\n                    unmountOnExit>\r\n                    <AlertMessage message={ message}/>\r\n                </CSSTransition>\r\n\r\n            </form>   \r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    items: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSubmit: ( name, number ) => dispatch(contactsOperations.addContact( name, number )),\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/operations';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport Button from '../Button/Button';\r\nimport s from '../ContactList/ContactList.module.css';\r\nimport contactsSelectors from '../../redux/contacts/selectors';\r\n\r\nconst ContactList = ({ contacts, onDelete}) => {\r\n    return (\r\n        <TransitionGroup component=\"ul\">\r\n            {contacts.map(({ id, name, number }) => (\r\n                <CSSTransition key={id} timeout={250} classNames={s}>\r\n                    <li className={s.contactList} /*key={id}*/ id={ id}>\r\n                        <p className={s.contactText}>{name}</p>\r\n                        <p className={s.contactText}>{number}</p>\r\n                        <Button label=\"Delete\" onClick={() => onDelete(id)} />\r\n                    </li>\r\n                </CSSTransition>\r\n            ))}\r\n            </TransitionGroup>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n    contacts: contactsSelectors.getFilterContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onDelete: (id) => dispatch(contactsOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport * as contactsActions from '../../redux/contacts/actions';\r\nimport s from '../Filter/Filter.module.css';\r\nimport contactsSelectors from '../../redux/contacts/selectors';\r\n\r\nconst Filter = ({ items, name, onChangeFilter}) =>(\r\n\r\n     <CSSTransition\r\n            in={items.length >= 2}\r\n            timeout={250}\r\n            classNames={s}\r\n         unmountOnExit>\r\n        <div className={s.container}>\r\n            <label className={ s.labelFilter}>Find contacts by name\r\n             <br/>\r\n                <input className={s.filterInput}\r\n                    type=\"text\"\r\n                    value={name}\r\n                    onChange={ (e)=>onChangeFilter(e.target.value)} />\r\n            </label>    \r\n         </div>\r\n        </CSSTransition>\r\n    \r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n    name: contactsSelectors.getFilterName(state),\r\n    items: contactsSelectors.getAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport srtyles from '../Logo/Logo.module.css';\r\n\r\nconst Logo = () => (\r\n    <CSSTransition\r\n        in={true}\r\n        appear={true}\r\n        timeout={ 500}\r\n        classNames={srtyles}\r\n        >\r\n    <header>\r\n        <h1 className={srtyles.logo}>Phonebook</h1>\r\n    </header>\r\n       </CSSTransition>\r\n);\r\n\r\nexport default Logo;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList'\nimport Filter from './components/Filter/Filter';\nimport Logo from './components/Logo/Logo';\nimport s from './App.module.css';\nimport contactsOperations from './redux/contacts/operations';\nimport contactsSelectors from './redux/contacts/selectors';\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  render() { \n    return (\n      \n        <div>\n        <Logo />\n        {this.props.loadingContacts && <h2 className={ s.loading}>Loading...</h2>}\n        <div className={s.container}>\n          \n            <ContactForm />\n            <Filter />\n            <ContactList />\n          </div>\n        </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  loadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactRequest,\r\n    fetchContactSuccess,\r\n    fetchContactError,\r\n    changeFilter\r\n} from './actions';\r\n\r\nconst initialState = {\r\n    contacts: {\r\n        items: [],\r\n        filter: ''\r\n    }\r\n}\r\n \r\nconst items = createReducer(initialState.contacts.items, {\r\n    [fetchContactSuccess]: (_, {payload})=>payload,\r\n    [addContactSuccess]: (state, action) => [action.payload, ...state],\r\n    [deleteContactSuccess]: (state, action) => state.filter(contact => contact.id !== action.payload)\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactRequest]: () => true,\r\n    [fetchContactSuccess]: () => false,\r\n    [fetchContactError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]:()=> false,\r\n});\r\n\r\nconst filter = createReducer(initialState.contacts.filter, {\r\n    [changeFilter]: (_, action) => action.payload,\r\n});\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER\r\n} from 'redux-persist';\r\nimport contactsReducer from './contacts/reducer';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n            ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n    logger,\r\n];\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n},\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n\r\n\r\nconst contactsStore = {\r\n    store\r\n};\r\n\r\nexport default contactsStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport { Provider } from 'react-redux';\n//import { PersistGate } from 'redux-persist/integration/react';\nimport App from './App';\nimport contactsStore from './redux/store';\n\n\n\nReactDOM.render(\n    <Provider store={contactsStore.store}>\n        {/*<PersistGate loading={null} persistor={ contactsStore.persistor}>*/}\n            <App />\n        {/*</PersistGate>*/}\n    </Provider>,\n    document.querySelector('#root')\n);\n\n\n\n"],"sourceRoot":""}